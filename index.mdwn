### Introduction
`dnstap` adds a fast, binary format event stream directly into DNS servers. It uses [Protocol Buffers](https://developers.google.com/protocol-buffers/) to encode events that occur inside a nameserver in a vendor-neutral format. Currently `dnstap` can only encode the reception and transmission of wire-format DNS messages. Server-side `dnstap` support is being developed initially for the [Unbound](http://unbound.net/) recursive DNS server. A command line tool to receive and decode `dnstap` events is also being worked on.

We plan to define more event types and add support to more DNS servers in the future.

Check out [this example output](https://gist.github.com/edmonds/5772879) from the `dnstap` command-line tool to get an idea of the kind of information that `dnstap` can encode.

### Presentations
A [slide deck](http://dnstap.info/slides/dnstap.html) introducing `dnstap` and giving the current status was presented on June 13, 2013.

### Mailing list
There is a [dnstap mailing list](http://lists.redbarn.org/mailman/listinfo/dnstap) for everyone interested in discussing `dnstap`.

### Code
The following `dnstap` code repositories are available.

#### [`dnstap`](https://github.com/dnstap/dnstap)
This is the C library for adding `dnstap` support to a DNS server.

You need this if you're a DNS programmer adding `dnstap` support to a nameserver, or if you're compiling a nameserver with `dnstap` support.

Release tarballs of the library have no extra dependencies, but a `git` checkout requires the [`protobuf-c`](https://code.google.com/p/protobuf-c/) compiler and the `autotools` to be installed, since no generated files are checked in to this repository.

```
$ sudo apt-get install protobuf-c-compiler
$ git clone git://github.com/dnstap/dnstap.git
$ cd dnstap && ./autogen.sh && ./configure && make && sudo make install
```

#### [`dnstap.pb`](https://github.com/dnstap/dnstap.pb)
This is the [Protocol Buffers](https://code.google.com/p/protobuf/) schema defining the layout of `dnstap` payloads. Use this if you want to process `dnstap` payloads in a programming language with `protobuf` support, or if you want to extend the `dnstap` schema to support new event types.

```
$ git clone git://github.com/dnstap/dnstap.pb.git
$ cd dnstap.pb
$ protoc-c --c_out=. dnstap.proto
$ protoc --cpp_out=. dnstap.proto
$ protoc --python_out=. dnstap.proto
$ protoc --go_out=. dnstap.proto
```

#### [`unbound`](https://github.com/dnstap/unbound)
This is [NLNet Labs'](http://nlnetlabs.nl/) [Unbound](http://unbound.net/) recursive DNS server, patched to generate `dnstap` payloads. `dnstap` support is developed on the `branches/dnstap` branch and periodically merged to `master`.

Building Unbound with `dnstap` support requires that the `dnstap` library be installed first, see above. `dnstap` support for Unbound also introduces a build dependency on the `pkg-config` utility.

Two new `./configure` arguments have been added: `--enable-dnstap` to build with `dnstap` support, and `--with-dnstap-socket-path` to set the default `dnstap` socket path.

```
$ git clone git@github.com:dnstap/unbound.git
$ cd unbound && ./configure --enable-dnstap && make && sudo make install
```

#### [`golang-dnstap`](https://github.com/dnstap/golang-dnstap)
This is the [Go](http://golang.org/) language library for working with `dnstap` sockets, log files, and message payloads. It also includes a command-line capture tool.

~~~
# apt-get install golang
$ go get -u github.com/dnstap/golang-dnstap/dnstap
~~~

### Quick setup

#### Unbound DNS server

Add the following lines to `unbound.conf`:

```
server:
    dnstap-enable: yes
    dnstap-socket-path: "/var/run/unbound/dnstap.sock"
    dnstap-send-identity: yes
    dnstap-send-version: yes
    dnstap-log-resolver-response-messages: yes
    dnstap-log-client-query-messages: yes
```

Start Unbound and it will begin sending `dnstap` payloads to the `AF_UNIX` socket specified by the `dnstap-socket-path` variable.

You also need a capture tool listening on the other side of the socket.

#### `dnstap` command-line tool

The following command listens on the given `AF_UNIX` socket and decodes messages to `stdout`.

```
dnstap -s /var/run/unbound/dnstap.sock
```

The following command listens on the given `AF_UNIX` socket and saves message payloads to a binary `dnstap`-format log file.

```
dnstap -s /tmp/dnstap.sock -w /tmp/test.dnstap
```

The following command reads a previously saved `dnstap`-format log file and writes [YAML](http://en.wikipedia.org/wiki/YAML)-formatted output to `stdout`. This format is extremely verbose.

```
dnstap -y -r test.dnstap
```

The following command reads a previously saved `dnstap`-format log file and writes [YAML](http://en.wikipedia.org/wiki/YAML)-formatted output to the given output file. This format is extremely verbose.

```
dnstap -y -r test.dnstap -w test.yaml
```

### Authors and Contributors
`dnstap` was written by Robert Edmonds, with input from Paul Vixie.
